name: CI
# runs linting for whole repository, and:
# on PR: runs tests for packages with changes (or all if global files are changed)
# on push to main or on dipatch: runs tests for all packages

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

jobs:
  fast-lint:
    uses: ./.github/workflows/fast-lint.yaml

  get-packages:
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.packages.outputs.packages }}
      packages-to-publish: ${{ github.event_name == 'pull_request' && steps.publish.outputs.publish || '[]' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Collect changed packages
        id: packages
        run: uv run --no-project --script .github/get-packages.py ${{ github.base_ref }}

      - name: Collect packages that would be published on merge
        id: publish
        if: github.event_name == 'pull_request'
        run: |
          set -xueo pipefail
          OLD_REF=${{ github.event.pull_request.base.sha }}
          NEW_REF=${{ github.event.pull_request.head.sha }}
          PACKAGES="$(uv run --no-project --script .github/get-packages-to-publish.py $OLD_REF $NEW_REF)"
          echo "publish=${PACKAGES}" >> $GITHUB_OUTPUT

  tests:
    needs: [fast-lint, get-packages]
    if: ${{ needs.get-packages.outputs.packages != '[]' }}
    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJson(needs.get-packages.outputs.packages) }}
    uses: ./.github/workflows/tests.yaml
    with:
      package: ${{ matrix.package }}

  tests-passed:
    needs: [tests]
    if: ${{ !cancelled() }}  # run even if tests are skipped or failed
    runs-on: ubuntu-latest
    steps:
      - if: ${{ needs.tests.result != 'success' && needs.tests.result != 'skipped' }}
        run: |
          echo '${{ toJSON(needs) }}'
          exit 1

  template-and-example-in-sync:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v6
      - run: |
          uvx --from rust-just just init --no-input
          rm -rf .example
          mv example .example
          # check if tracked files changed, or any new files were added
          # (git diff --exit-code isn't effected by new files)
          STATUS=$(git status --porcelain)
          echo "$STATUS"
          test -z "$STATUS"

  template-and-interface-example-in-sync:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v6
      - working-directory: interfaces
        run: |
          uvx --from rust-just just interface init --no-input
          rm -rf .example
          mv example .example
          # check if tracked files changed, or any new files were added
          # (git diff --exit-code isn't effected by new files)
          STATUS=$(git status --porcelain)
          echo "$STATUS"
          test -z "$STATUS"

  changelog-updated-for-release:
    needs: [get-packages]
    if: ${{ needs.get-packages.outputs.packages-to-publish != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJson(needs.get-packages.outputs.packages-to-publish) }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Ensure CHANGELOG.md has been updated
        run: git diff --name-only ${{ github.base_ref }} | grep -q '^${{ matrix.package }}/CHANGELOG.md$'
