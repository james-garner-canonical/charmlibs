name: Tests
# runs tests for specified package
# always runs static tests
# runs unit, functional, and integration tests if the package implements them

on:
  workflow_call:
    inputs:
      package:
        required: true
        type: string
      skip-juju:
        required: false
        type: boolean
  workflow_dispatch:
    inputs:
      package:
        description: Package (by path) to run tests for.
        required: true
        type: string
      skip-juju:
        description: Skip Juju integration tests.
        required: false
        type: boolean

jobs:
  init:
    runs-on: ubuntu-latest
    outputs:
      tests: ${{ steps.tests.outputs.tests }}
      python: ${{ steps.python.outputs.versions }}
      functional-matrix: ${{ steps.functional.outputs.matrix }}
      integration-substrates: ${{ steps.integration-substrates.outputs.substrates }}
      integration-tags: ${{ steps.integration-tags.outputs.tags }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Check which Python versions this package supports
        id: python
        run: uv run --no-project --script .github/get-supported-python-versions.py ${{ inputs.package }}

      - name: Check which test suites this package has
        id: tests
        run: |
          tests=()
          for test in unit functional integration; do
            if [ -d ${{ inputs.package }}/tests/$test ]; then
              tests+=($test)
            fi
          done
          js=$(jq '$ARGS.positional' --null-input --compact-output --args "${tests[@]}")
          echo "tests=$js"
          echo "tests=$js" >> "$GITHUB_OUTPUT"

      - name: Check requirements for functional tests
        id: functional
        if: contains(fromJson(steps.tests.outputs.tests), 'functional')
        run: uv run --no-project --script .github/get-functional-test-matrix.py ${{ inputs.package }}

      - name: Check substrates needed for integration tests
        id: integration-substrates
        if: contains(fromJson(steps.tests.outputs.tests), 'integration')
        run: |
          substrates=()
          for substrate in k8s machine; do
            set +e  # don't abort if the next process has a non-zero exit code
            uvx --from rust-just just integration-$substrate ${{ inputs.package }} --collect-only -q
            case $? in
                0) substrates+=($substrate);;
                5) echo "No tests for $substrate";;
                *) echo "Unexpected exit code $?"; exit 1;;
            esac
            set -e  # return to aborting if processes fail
          done
          js=$(jq '$ARGS.positional' --null-input --compact-output --args "${substrates[@]}")
          echo "substrates=$js"
          echo "substrates=$js" >> "$GITHUB_OUTPUT"

      - name: Check tags to run integration tests with
        id: integration-tags
        if: contains(fromJson(steps.tests.outputs.tests), 'integration')
        shell: python
        run: |
          import json, os, pathlib, tomllib
          pyproject_toml = tomllib.loads(pathlib.Path('${{ inputs.package }}', 'pyproject.toml').read_text())
          tags = pyproject_toml.get('tool', {}).get('charmlibs', {}).get('integration', {}).get('tags') or ['']
          line = f'tags={json.dumps(tags)}'
          print(line)
          with pathlib.Path(os.environ['GITHUB_OUTPUT']).open('a') as f:
            print(line, file=f)


  lint:
    needs: init
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python: ${{ fromJson(needs.init.outputs.python) }}
    steps:
      - uses: actions/checkout@v5

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Run static analysis and other checks
        run: uvx --from rust-just just python=${{ matrix.python }} lint ${{ inputs.package }}

  unit:
    needs: init
    if: contains(fromJson(needs.init.outputs.tests), 'unit')
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python: ${{ fromJson(needs.init.outputs.python) }}
    steps:
      - uses: actions/checkout@v5

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Run unit tests
        run: uvx --from rust-just just python=${{ matrix.python }} unit ${{ inputs.package }}

  functional:
    needs: init
    if: contains(fromJson(needs.init.outputs.tests), 'functional')
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.init.outputs.functional-matrix) }}
    runs-on: ${{ matrix.ubuntu }}
    steps:
      - uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.24'
          # To suppress the "Restore cache failed" error, since there is no go.sum file here.
          cache: false

      - name: Install Pebble
        if: matrix.pebble != 'no-pebble'
        run: go install github.com/canonical/pebble/cmd/${{ matrix.pebble }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Run functional tests
        if: matrix.sudo == 'no-sudo'
        run: uvx --from rust-just just python=${{ matrix.python }} functional ${{ inputs.package }}

      - name: Run functional tests with sudo
        if: matrix.sudo != 'no-sudo'
        run: sudo env "PATH=$PATH" uvx --from rust-just just python=${{ matrix.python }} functional ${{ inputs.package }}

  integration:
    needs: init
    if: contains(fromJson(needs.init.outputs.tests), 'integration') && !inputs.skip-juju
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        tag: ${{ fromJson(needs.init.outputs.integration-tags) }}
        substrate: ${{ fromJson(needs.init.outputs.integration-substrates) }}
    steps:
      - uses: actions/checkout@v5

      - name: Install concierge
        run: sudo snap install --classic concierge

      - name: Prepare Juju for microk8s
        if: ${{ matrix.substrate == 'k8s' }}
        run: sudo concierge prepare --verbose --juju-channel=3/stable --charmcraft-channel=3.x/stable -p microk8s

      - name: Prepare Juju for machine
        if: ${{ matrix.substrate == 'machine' }}
        run: sudo concierge prepare --verbose --juju-channel=3/stable --charmcraft-channel=3.x/stable -p machine

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Pack charms
        if: ${{ hashFiles(format('{0}/tests/integration/pack.sh', inputs.package)) != '' }}
        run: uvx --from rust-just just tag='${{ matrix.tag }}' pack-${{ matrix.substrate }} ${{ inputs.package }}

      - name: Run Juju integration tests
        run: uvx --from rust-just just tag='${{ matrix.tag }}' integration-${{ matrix.substrate }} ${{ inputs.package }}
